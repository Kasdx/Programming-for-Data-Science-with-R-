data("USArrests")
my_data <- USArrests
my_data <- na.omit(my_data)
my_data <- scale(my_data)
head(my_data)
install.packages("factoextra")
install.packages("cluster")
library("cluster")
library("factoextra")
res.dist <- get_dist(USArrests , stand = TRUE , method = "euclidean")
fviz_dist(res.dist,
gradient = list(low = "Red", mid = "white", high = "#FC4E07"))
fviz_dist(res.dist,
gradient = list(low = "Green", mid = "white", high = "Red"))
fviz_dist(res.dist,
gradient = list(low = "Dark Green", mid = "white", high = "Red"))
fviz_dist(res.dist,
gradient = list(low = "Dark Green", mid = "white", high = "Dark Red"))
fviz_dist(res.dist,
gradient = list(low = "Dark Green", mid = "Blue", high = "Dark Red"))
fviz_dist(res.dist,
gradient = list(low = "Dark Green", mid = "Light Blue", high = "Dark Red"))
fviz_dist(res.dist,
gradient = list(low = "Dark Green"))
fviz_dist(res.dist,
gradient = list(low = "Dark Green", mid = "Light Blue", high = "Dark Red"))
head(res.dist)
str(res.dist)
help(fviz_nbclust)
fviz_nbclust(my_data, hcut, method = "gap_stat")
km.res <- hclust(my_data, 4, nstart = 25)
help(hclust)
km.res <- hclust(res.dist, method="ward.D")
fviz_cluster(km.res, data = my_data, frame.type = "convex")+
theme_minimal()
help(nstart)
help("nstart")
help("kmeans")
km.res <- kmeans(my_data , 4 , nstart=25)
fviz_cluster(km.res, data = my_data, frame.type = "convex")+
theme_minimal()
help(fviz_cluster)
data("iris")
head(iris)
# Remove species column (5) and scale the data
iris.scaled <- scale(iris[, -5])
hc.cut <- hcut(iris.scaled, k = 3, hc_method = "complete")
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
install.packages("whisker")
library(whisker)
fviz_dend(hc.cut, show_labels = FALSE, rect = TRUE)
fviz_cluster(hc.cut, ellipse.type = "convex")
my_data <- scale(USArrests)
library("factoextra")
fviz_nbclust(my_data, kmeans, method = "gap_stat")
library("cluster")
library("factoextra")
help(fviz_nbclust)
fviz_nbclust(my_data, hcut, method = "gap_stat")
help(fviz_nbclust)
gap_stat <- clusGap(iris.scaled, FUN = hcut, K.max = 10, B = 10)
fviz_nbclust(my_data, hcut, method = "gap_stat")
gap_stat <- clusGap(iris.scaled, FUN = hcut, K.max = 10, B = 10)
install.packages("dplyr")
install.packages("ggplot2")
library(ggplot2)
?ggplot
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ds
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
ggplot(diamonds)  # if only the dataset is known.
ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
ggplot(diamonds, aes(x=carat, y=price))  # if both X and Y axes are fixed for all layers.
ggplot(diamonds, aes(x=carat, color=cut))  # Each category of the 'cut' variable will now have a distinct  color, once a geom is added.
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth()
ggplot(diamonds)
head(diamonds)
?diamonds
data(diamonds)
diamonds= data(diamonds)
diamonds <-  data(diamonds)
ggplot(diamonds)
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth()
library(ggplot2)
ggplot(diamonds)
ggplot(diamonds ,  aes(x= carat , y=price))
ggplot(diamonds ,  aes(x= carat , y=price)) + geom_point()
ggplot(diamonds ,  aes(x= carat , y=price)) + geom_smooth
ggplot(diamonds ,  aes(x= carat , y=price)) + geom_smooth()
head(diamonds)
table(diamonds$cut)
ggplot(diamonds ,  aes(x= carat , y=price , color=cut)) + geom_smooth()
ggplot(diamonds ,  aes(x= carat , y=price , color=cut)) + geom_point()
ggplot(diamonds ,  aes(x= carat , y=price , color=cut , shape=cut)) + geom_point()
ggplot(diamonds ,  aes(x= carat , y=price , color=cut , shape=cut , alpha=0.6)) + geom_point()
ggplot(diamonds ,  aes(x= carat , y=price , color=cut , shape=cut , alpha=0.6)) + geom_point()
ggplot(diamonds ,  aes(x= carat , y=price , color=cut  , alpha=0.6)) + geom_point()
library(ggplot2)
#Let us look at the dataset:
head(diamonds)
ggplot(diamonds)
ggplot(diamonds , aes(x = carat , y= price)
ggplot(diamonds , aes(x = carat , y= price))
ggplot(diamonds , aes(x= carat , y= price , color=cut)) + geom_pont()
ggplot(diamonds , aes(x= carat , y= price , color=cut)) + geom_point()
ggplot(diamonds , aes(x= carat , y= price )) +
geom_point(mapping = aes(color=cut))
?geom_smooth
ggplot(diamonds , aes(x= carat , y= price )) +
geom_point(mapping = aes(color=cut))  + geom_smooth( color=color)
ggplot(diamonds , aes(x= carat , y= price )) +
geom_point(mapping = aes(color=cut))  + geom_smooth( color=clarity)
ggplot(diamonds , aes(x= carat , y= price )) +
geom_point(mapping = aes(color=cut))  + geom_smooth( aes(color=clarity))
ggplot(diamonds , aes(x= carat , y= price )) +
geom_point(mapping = aes(color=cut))  + geom_smooth( )
ggplot(diamonds , aes(x= carat , y= price , color=cut )) +
geom_point()  + geom_smooth( )
?ggplot
library(ggplot2)
?ggplot
letters[1:3]
rep(letters[1:3], each = 10)
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ds
ggplot(df, aes(gp, y))
ggplot(df, aes(gp, y)) +
geom_point()
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
data(diamonds)
head(diamonds)
data(diamonds)
head(diamonds)
ggplot(diamonds , aes(cut , price)) + geom_points()
ggplot(diamonds , aes(cut , price)) + geom_point()
library(ggplot2)
ggplot(diamonds , aes(carat , price)) + geom_point()
ggplot(diamonds , aes(carat , price)) +
geom_point(aes(color=cut))
ggplot(diamonds , aes(carat , price)) +
geom_point(aes(color=cut)) +
geom_smooth(aes(color=cut))
ggplot(diamonds) +
geom_point( aes(x=carat  , y=price  ))
?aes
ggplot(diamonds) +
geom_point( aes(x=carat  , y=price^2  , color ))
ggplot(diamonds) +
geom_point( aes(x=carat  , y=(price)*2  , color ))
ggplot(diamonds) +
geom_point( aes(x=carat  , y=(price)*2   ))
ggplot(diamonds) +
geom_point( aes(x=carat  , y= price  , color=cut , alpha=0.5 ))
?aes
library(ggplot2)
head(diamonds)
#Step 1 - Data
ggplot(diamonds)
ggplot(diamonds) +
geom_point()
#Step 1 - Data
ggplot(diamonds) +
geom_point(aes(x=carat  , y= price  ))
#Step 1 - Data
ggplot(diamonds) +
geom_point(aes(x=carat  , y= price , color = cut   ))
#install.packages("ggplot2")
library(ggplot2)
head(diamonds)
#install.packages("ggplot2")
library(ggplot2)
head(diamonds)
ggplot(diamonds)
ggplot(diamonds) +
geom_point( aes( x=carat   , y=price ) )
ggplot(diamonds) +
geom_point( aes( x=carat   , y=price , color=cut ) )
ggplot(diamonds) +
geom_point( aes( x=carat   , y=price , color=cut , alpha=0.25 ) )
geom_point( aes( x=carat   , y=price , color=cut , alpha=0.25 , size=depth )
ggplot(diamonds) +
geom_point( aes( x=carat   , y=price , color=cut , alpha=0.25 , size=depth ) )
ggplot(diamonds) +
geom_point( aes( x=carat   , y=price , color=cut , alpha=0.25 , size=depth ) )
a <- 1:1000
1:1000
a <- c(1:1000)
a//31
a%3
a%%13
a%%13==0
a[a%%13==0]
a1 <- a[a%%13==0]
a2 <- a[a%%31==0]
intersect(a1 , a2)
union(a1,a2)
sum(union(a1,a2))
library('ggplot2')
library('ggthemes')
library('scales')
library('dplyr')
library('mice')
library('randomForest')
library('data.table')
library('gridExtra')
library('corrplot')
library('GGally')
library('e1071')
packages <- c("ggplot2"
,"ggthemes"
,"scales"
,"dplyr"
,"mice"
,"randomForest"
,"data.table"
,"gridExtra"
,"corrplot"
,"GGally"
,"e1071" )
install.packages(pks)
pks <- c("ggplot2"
,"ggthemes"
,"scales"
,"dplyr"
,"mice"
,"randomForest"
,"data.table"
,"gridExtra"
,"corrplot"
,"GGally"
,"e1071" )
install.packages(pks)
install.packages(pks)
library(missForest)     # Imputing the missing values from dataset
library(caret)          # Using Caret package for Cross Validation
library(e1071)          # Explore the Skewness of various features of the dataset.
library(elasticnet)     # Dependency for ridge regression model
library(randomForest)
#Store sales_price as another variable:
SalePrice = train$SalePrice
train$SalePrice = NULL
train <- read.csv("housing_data.csv")
setwd("C:/Users/jatan/Google Drive/2. Data Science/8. Packt/1. Programming for Data Science with R/Section 7- Integrating different components of Data Science - A use case/Code")
train <- read.csv("housing_data.csv")
SalePrice = train$SalePrice
train$SalePrice = NULL
missing <- sort(sapply(train ,function(x) sum(is.na(x))  ) , decreasing = T)
missing[missing>0]
imputed_data <- missForest(xmis = train, maxiter = 10, ntree = 100,mtry = floor(sqrt(ncol(train))))
train_no_missing <- imputed_data$ximp
head(train_no_missing)
dim(train_no_missing)
